#include <WiFi.h>
#include <HX711_ADC.h>
#include <EEPROM.h>
#include <SPI.h>
#include <MFRC522.h>
#include <PubSubClient.h>

#define ssid "Kat"
#define password "12345678"
#define mqtt_server "qhali.online"
#define mqtt_port 1883
#define mqtt_user "esp"
#define mqtt_pass "123456"

#define mqtt_topic "sensor/objetoDetectado"
#define mqtt_topic_mens "mensajesESP"
const char* topic_unity_to_esp = "unity/esp";
const char* topic_esp_to_unity = "esp/unity";
String men="";
WiFiClient espClient;
PubSubClient client(espClient);

#define SwitchOnOff 12  // Botón conectado al pin 12
#define LedON 4         // LED ON/OFF
#define RST_PIN 14      // Pin de reinicio del MFRC522
#define SS_PIN 5        // Pin de selección de esclavo del MFRC522

// Pines celda 1 derecha:
const int HX711_dout = 22; //mcu > HX711 dout pin
const int HX711_sck = 21;  //mcu > HX711 sck pin
// Pines celda 2 izquierda:
const int HX711_dout2 = 26; //mcu > HX711 dout pin
const int HX711_sck2 = 25;  //mcu > HX711 sck pin

HX711_ADC LoadCell(HX711_dout2, HX711_sck2);//definimos celda de carga
MFRC522 mfrc522(SS_PIN, RST_PIN); // Crear instancia de MFRC522
bool LecturaAnterior = false;     //Indica si ya se ha leido una tarjeta previamente
bool tarjetaLeida = false;        // Bandera para saber si la tarjeta ha sido leída
String nombreTarjeta = ""; // Variable para almacenar el nombre de la tarjeta

// Variables para el cálculo celda 1
float correctedWeight = 0.0;
float fuerzaPromedio = 0.0;
bool promedioCalculado = false;
float valoresLectura[10]; // Almacena las últimas 10 lecturas
int indiceLectura = 0;
bool fuerzaDisminuida = false;
bool fuerzaDetectada = false; // Bandera para detectar el cambio
bool sinFuerza = true;        // Bandera para detectar el cambio
int contadorPromedios = 0;    // Contador para los promedios calculados

// Variables para el cálculo celda 2
float correctedWeight2 = 0.0;
float fuerzaPromedio2 = 0.0;
bool promedioCalculado2 = false;
float valoresLectura2[10]; // Almacena las últimas 10 lecturas
int indiceLectura2 = 0;
bool fuerzaDisminuida2 = false;
bool fuerzaDetectada2 = false; // Bandera para detectar el cambio
bool sinFuerza2 = true;        // Bandera para detectar el cambio
int contadorPromedios2 = 0;    // Contador para los promedios calculados

bool fuerzaLeida = false;

const int sensorPin = 13;
volatile int count = 0;    // Contador de vueltas completas
int SensorState = HIGH; //cuando no detecta metal
int lastSensorState = HIGH;
bool PedaleoLeido = false;  // Para habilitar/deshabilitar la tarea de pedaleo
bool enablePedaleoTask = false;  // control para habilitar la tarea de pedaleo

int estadoBotonActual = HIGH;
int estadoBotonAnterior = HIGH;
bool SistemaEncendido = false;
String Miembro;
String Nivel;
int Puntaje;
int pedaleo;
long lastMsg = 0;
char msg[50];
bool blockPedalCounting = false;  // Controla si se bloquea el conteo de vueltas

// Declaración de la tarea
TaskHandle_t Task1;

void setup() {
  Serial.begin(115200);
  pinMode(sensorPin, INPUT);
  pinMode(SwitchOnOff, INPUT_PULLUP);  // Configura el pin del botón como entrada con pull-up interno               // Inicia la comunicación serial
  pinMode(LedON, OUTPUT);
  SPI.begin();        // Inicializar bus SPI
  mfrc522.PCD_Init(); // Inicializar MFRC522

  float calibrationValue; // calibration value (see example file "Calibration.ino")
  calibrationValue = 1095.0; // uncomment this if you want to set the calibration value in the sketch
  //izquierda
  float calibrationValue2; // calibration value (see example file "Calibration.ino")
  calibrationValue2 = 1095.0; // uncomment this if you want to set the calibration value in the sketch

  LoadCell.setCalFactor(1095.0); // Factor de calibración actualizado
  // Conexión WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando a WiFi...");
  }
  Serial.println("Conectado a WiFi");

  // Configura el cliente MQTT
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
while (!client.connected()) {
        Serial.println("Conectando al broker MQTT...");
        if (client.connect("ESP32Client", mqtt_user, mqtt_pass)) {
            Serial.println("Conectado al broker MQTT");
            client.subscribe(topic_unity_to_esp);
        } else {
            delay(500);
        }
    }
  // Crear una tarea en el núcleo 0 para enviar datos a unity
  xTaskCreatePinnedToCore(
    sendHello,      // Función de la tarea
    "Task1",       // Nombre de la tarea
    10000,         // Tamaño del stack
    NULL,          // Parámetros de entrada
    1,             // Prioridad de la tarea
    &Task1,        // Manejador de la tarea
    0               // Núcleo 0
  );
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  estadoBotonActual = digitalRead(SwitchOnOff); // Lee el estado actual del botón
  if (estadoBotonActual != estadoBotonAnterior) {
    if (estadoBotonActual == LOW) {  // El botón está presionado
      //sistemaEncendido = true; // sistema encendido
      Serial.println("Sistema Encendido");
      men="Pedalera encendida";
      client.publish(mqtt_topic_mens,String(men).c_str());
      digitalWrite(LedON, HIGH);
      LoadCell.begin();
      long stabilizingtime = 2000; // Tiempo de estabilización para la celda de carga
      LoadCell.start(stabilizingtime);

      // Tara automática
      Serial.println("Realizando tara automática, espera por favor...");
      men="Realizando tara automática, espera por favor...";
      client.publish(mqtt_topic_mens,String(men).c_str());
      LoadCell.tare(); // Toma un promedio de varias lecturas para ajustar a 0

      Serial.println("Tara completada");
      men="Tara completada";
      client.publish(mqtt_topic_mens,String(men).c_str());
      digitalWrite(LedON, LOW);
      delay(100);
      digitalWrite(LedON, HIGH);
      delay(100);
      digitalWrite(LedON, LOW);
      delay(100);
      digitalWrite(LedON, HIGH);
      men="Pase su tarjeta...";
      client.publish(mqtt_topic_mens,String(men).c_str());
      iniciarSistema();
      LecturaAnterior = false;
      tarjetaLeida = false; // Resetear la bandera de tarjeta leída
      PedaleoLeido = false;    // Permitir que la función de fuerza se ejecute nuevamente
      Serial.println("Coloque su tarjeta..."); 
    } else if (estadoBotonActual == HIGH) {  // El botón no está presionado
      men="Pedalera apagada";
      client.publish(mqtt_topic_mens,String(men).c_str());
      delay(300);
      apagarSistema();
    }
    estadoBotonAnterior = estadoBotonActual;
  }
  // Solo proceder si el sistema está encendido y la lectura anterior fue realizada
  if (estadoBotonActual == LOW && !LecturaAnterior) {
    lecturaTarjeta();//lee la tarjeta si el sistema esta encendido
    LecturaAnterior = true;  // Marca que la lectura se realizó
  }
  // Si la tarjeta ha sido leída y la fuerza no ha sido leída, proceder a la lectura de fuerza
  if (tarjetaLeida && !fuerzaLeida) {
    lecturafuerza();  // Ejecuta la función de lectura de fuerza
  }
  delay(100);  // Pequeño retraso para evitar rebotes
}